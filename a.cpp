#include "parsec.hpp"
namespace parsec::xml {
#define C constexpr inline auto
C BaseChar =
    rng<0x41, 0x5A>{} | rng<0x61, 0x7A>{} | rng<0xC0, 0xD6>{} |
    rng<0xD8, 0xF6>{} | rng<0xF8, 0xFF>{} | rng<0x100, 0x131>{} |
    rng<0x134, 0x13E>{} | rng<0x141, 0x148>{} | rng<0x14A, 0x17E>{} |
    rng<0x180, 0x1C3>{} | rng<0x1CD, 0x1F0>{} | rng<0x1F4, 0x1F5>{} |
    rng<0x1FA, 0x217>{} | rng<0x250, 0x2A8>{} | rng<0x2BB, 0x2C1>{} |
    chr<0x386>{} | rng<0x388, 0x38A>{} | chr<0x38C>{} | rng<0x38E, 0x3A1>{} |
    rng<0x3A3, 0x3CE>{} | rng<0x3D0, 0x3D6>{} | chr<0x3DA>{} | chr<0x3DC>{} |
    chr<0x3DE>{} | chr<0x3E0>{} | rng<0x3E2, 0x3F3>{} | rng<0x401, 0x40C>{} |
    rng<0x40E, 0x44F>{} | rng<0x451, 0x45C>{} | rng<0x45E, 0x481>{} |
    rng<0x490, 0x4C4>{} | rng<0x4C7, 0x4C8>{} | rng<0x4CB, 0x4CC>{} |
    rng<0x4D0, 0x4EB>{} | rng<0x4EE, 0x4F5>{} | rng<0x4F8, 0x4F9>{} |
    rng<0x531, 0x556>{} | chr<0x559>{} | rng<0x561, 0x586>{} |
    rng<0x5D0, 0x5EA>{} | rng<0x5F0, 0x5F2>{} | rng<0x621, 0x63A>{} |
    rng<0x641, 0x64A>{} | rng<0x671, 0x6B7>{} | rng<0x6BA, 0x6BE>{} |
    rng<0x6C0, 0x6CE>{} | rng<0x6D0, 0x6D3>{} | chr<0x6D5>{} |
    rng<0x6E5, 0x6E6>{} | rng<0x905, 0x939>{} | chr<0x93D>{} |
    rng<0x958, 0x961>{} | rng<0x985, 0x98C>{} | rng<0x98F, 0x990>{} |
    rng<0x993, 0x9A8>{} | rng<0x9AA, 0x9B0>{} | chr<0x9B2>{} |
    rng<0x9B6, 0x9B9>{} | rng<0x9DC, 0x9DD>{} | rng<0x9DF, 0x9E1>{} |
    rng<0x9F0, 0x9F1>{} | rng<0xA05, 0xA0A>{} | rng<0xA0F, 0xA10>{} |
    rng<0xA13, 0xA28>{} | rng<0xA2A, 0xA30>{} | rng<0xA32, 0xA33>{} |
    rng<0xA35, 0xA36>{} | rng<0xA38, 0xA39>{} | rng<0xA59, 0xA5C>{} |
    chr<0xA5E>{} | rng<0xA72, 0xA74>{} | rng<0xA85, 0xA8B>{} | chr<0xA8D>{} |
    rng<0xA8F, 0xA91>{} | rng<0xA93, 0xAA8>{} | rng<0xAAA, 0xAB0>{} |
    rng<0xAB2, 0xAB3>{} | rng<0xAB5, 0xAB9>{} | chr<0xABD>{} | chr<0xAE0>{} |
    rng<0xB05, 0xB0C>{} | rng<0xB0F, 0xB10>{} | rng<0xB13, 0xB28>{} |
    rng<0xB2A, 0xB30>{} | rng<0xB32, 0xB33>{} | rng<0xB36, 0xB39>{} |
    chr<0xB3D>{} | rng<0xB5C, 0xB5D>{} | rng<0xB5F, 0xB61>{} |
    rng<0xB85, 0xB8A>{} | rng<0xB8E, 0xB90>{} | rng<0xB92, 0xB95>{} |
    rng<0xB99, 0xB9A>{} | chr<0xB9C>{} | rng<0xB9E, 0xB9F>{} |
    rng<0xBA3, 0xBA4>{} | rng<0xBA8, 0xBAA>{} | rng<0xBAE, 0xBB5>{} |
    rng<0xBB7, 0xBB9>{} | rng<0xC05, 0xC0C>{} | rng<0xC0E, 0xC10>{} |
    rng<0xC12, 0xC28>{} | rng<0xC2A, 0xC33>{} | rng<0xC35, 0xC39>{} |
    rng<0xC60, 0xC61>{} | rng<0xC85, 0xC8C>{} | rng<0xC8E, 0xC90>{} |
    rng<0xC92, 0xCA8>{} | rng<0xCAA, 0xCB3>{} | rng<0xCB5, 0xCB9>{} |
    chr<0xCDE>{} | rng<0xCE0, 0xCE1>{} | rng<0xD05, 0xD0C>{} |
    rng<0xD0E, 0xD10>{} | rng<0xD12, 0xD28>{} | rng<0xD2A, 0xD39>{} |
    rng<0xD60, 0xD61>{} | rng<0xE01, 0xE2E>{} | chr<0xE30>{} |
    rng<0xE32, 0xE33>{} | rng<0xE40, 0xE45>{} | rng<0xE81, 0xE82>{} |
    chr<0xE84>{} | rng<0xE87, 0xE88>{} | chr<0xE8A>{} | chr<0xE8D>{} |
    rng<0xE94, 0xE97>{} | rng<0xE99, 0xE9F>{} | rng<0xEA1, 0xEA3>{} |
    chr<0xEA5>{} | chr<0xEA7>{} | rng<0xEAA, 0xEAB>{} | rng<0xEAD, 0xEAE>{} |
    chr<0xEB0>{} | rng<0xEB2, 0xEB3>{} | chr<0xEBD>{} | rng<0xEC0, 0xEC4>{} |
    rng<0xF40, 0xF47>{} | rng<0xF49, 0xF69>{} | rng<0x10A0, 0x10C5>{} |
    rng<0x10D0, 0x10F6>{} | chr<0x1100>{} | rng<0x1102, 0x1103>{} |
    rng<0x1105, 0x1107>{} | chr<0x1109>{} | rng<0x110B, 0x110C>{} |
    rng<0x110E, 0x1112>{} | chr<0x113C>{} | chr<0x113E>{} | chr<0x1140>{} |
    chr<0x114C>{} | chr<0x114E>{} | chr<0x1150>{} | rng<0x1154, 0x1155>{} |
    chr<0x1159>{} | rng<0x115F, 0x1161>{} | chr<0x1163>{} | chr<0x1165>{} |
    chr<0x1167>{} | chr<0x1169>{} | rng<0x116D, 0x116E>{} |
    rng<0x1172, 0x1173>{} | chr<0x1175>{} | chr<0x119E>{} | chr<0x11A8>{} |
    chr<0x11AB>{} | rng<0x11AE, 0x11AF>{} | rng<0x11B7, 0x11B8>{} |
    chr<0x11BA>{} | rng<0x11BC, 0x11C2>{} | chr<0x11EB>{} | chr<0x11F0>{} |
    chr<0x11F9>{} | rng<0x1E00, 0x1E9B>{} | rng<0x1EA0, 0x1EF9>{} |
    rng<0x1F00, 0x1F15>{} | rng<0x1F18, 0x1F1D>{} | rng<0x1F20, 0x1F45>{} |
    rng<0x1F48, 0x1F4D>{} | rng<0x1F50, 0x1F57>{} | chr<0x1F59>{} |
    chr<0x1F5B>{} | chr<0x1F5D>{} | rng<0x1F5F, 0x1F7D>{} |
    rng<0x1F80, 0x1FB4>{} | rng<0x1FB6, 0x1FBC>{} | chr<0x1FBE>{} |
    rng<0x1FC2, 0x1FC4>{} | rng<0x1FC6, 0x1FCC>{} | rng<0x1FD0, 0x1FD3>{} |
    rng<0x1FD6, 0x1FDB>{} | rng<0x1FE0, 0x1FEC>{} | rng<0x1FF2, 0x1FF4>{} |
    rng<0x1FF6, 0x1FFC>{} | chr<0x2126>{} | rng<0x212A, 0x212B>{} |
    chr<0x212E>{} | rng<0x2180, 0x2182>{} | rng<0x3041, 0x3094>{} |
    rng<0x30A1, 0x30FA>{} | rng<0x3105, 0x312C>{} | rng<0xAC00, 0xD7A3>{};
C Ideographic = rng<0x4E00, 0x9FA5>{} | chr<0x3007>{} | rng<0x3021, 0x3029>{};
C CombiningChar =
    rng<0x300, 0x345>{} | rng<0x360, 0x361>{} | rng<0x483, 0x486>{} |
    rng<0x591, 0x5A1>{} | rng<0x5A3, 0x5B9>{} | rng<0x5BB, 0x5BD>{} |
    chr<0x5BF>{} | rng<0x5C1, 0x5C2>{} | chr<0x5C4>{} | rng<0x64B, 0x652>{} |
    chr<0x670>{} | rng<0x6D6, 0x6DC>{} | rng<0x6DD, 0x6DF>{} |
    rng<0x6E0, 0x6E4>{} | rng<0x6E7, 0x6E8>{} | rng<0x6EA, 0x6ED>{} |
    rng<0x901, 0x903>{} | chr<0x93C>{} | rng<0x93E, 0x94C>{} | chr<0x94D>{} |
    rng<0x951, 0x954>{} | rng<0x962, 0x963>{} | rng<0x981, 0x983>{} |
    chr<0x9BC>{} | chr<0x9BE>{} | chr<0x9BF>{} | rng<0x9C0, 0x9C4>{} |
    rng<0x9C7, 0x9C8>{} | rng<0x9CB, 0x9CD>{} | chr<0x9D7>{} |
    rng<0x9E2, 0x9E3>{} | chr<0xA02>{} | chr<0xA3C>{} | chr<0xA3E>{} |
    chr<0xA3F>{} | rng<0xA40, 0xA42>{} | rng<0xA47, 0xA48>{} |
    rng<0xA4B, 0xA4D>{} | rng<0xA70, 0xA71>{} | rng<0xA81, 0xA83>{} |
    chr<0xABC>{} | rng<0xABE, 0xAC5>{} | rng<0xAC7, 0xAC9>{} |
    rng<0xACB, 0xACD>{} | rng<0xB01, 0xB03>{} | chr<0xB3C>{} |
    rng<0xB3E, 0xB43>{} | rng<0xB47, 0xB48>{} | rng<0xB4B, 0xB4D>{} |
    rng<0xB56, 0xB57>{} | rng<0xB82, 0xB83>{} | rng<0xBBE, 0xBC2>{} |
    rng<0xBC6, 0xBC8>{} | rng<0xBCA, 0xBCD>{} | chr<0xBD7>{} |
    rng<0xC01, 0xC03>{} | rng<0xC3E, 0xC44>{} | rng<0xC46, 0xC48>{} |
    rng<0xC4A, 0xC4D>{} | rng<0xC55, 0xC56>{} | rng<0xC82, 0xC83>{} |
    rng<0xCBE, 0xCC4>{} | rng<0xCC6, 0xCC8>{} | rng<0xCCA, 0xCCD>{} |
    rng<0xCD5, 0xCD6>{} | rng<0xD02, 0xD03>{} | rng<0xD3E, 0xD43>{} |
    rng<0xD46, 0xD48>{} | rng<0xD4A, 0xD4D>{} | chr<0xD57>{} | chr<0xE31>{} |
    rng<0xE34, 0xE3A>{} | rng<0xE47, 0xE4E>{} | chr<0xEB1>{} |
    rng<0xEB4, 0xEB9>{} | rng<0xEBB, 0xEBC>{} | rng<0xEC8, 0xECD>{} |
    rng<0xF18, 0xF19>{} | chr<0xF35>{} | chr<0xF37>{} | chr<0xF39>{} |
    chr<0xF3E>{} | chr<0xF3F>{} | rng<0xF71, 0xF84>{} | rng<0xF86, 0xF8B>{} |
    rng<0xF90, 0xF95>{} | chr<0xF97>{} | rng<0xF99, 0xFAD>{} |
    rng<0xFB1, 0xFB7>{} | chr<0xFB9>{} | rng<0x20D0, 0x20DC>{} | chr<0x20E1>{} |
    rng<0x302A, 0x302F>{} | chr<0x3099>{} | chr<0x309A>{};
C Digit = rng<0x30, 0x39>{} | rng<0x660, 0x669>{} | rng<0x6F0, 0x6F9>{} |
          rng<0x966, 0x96F>{} | rng<0x9E6, 0x9EF>{} | rng<0xA66, 0xA6F>{} |
          rng<0xAE6, 0xAEF>{} | rng<0xB66, 0xB6F>{} | rng<0xBE7, 0xBEF>{} |
          rng<0xC66, 0xC6F>{} | rng<0xCE6, 0xCEF>{} | rng<0xD66, 0xD6F>{} |
          rng<0xE50, 0xE59>{} | rng<0xED0, 0xED9>{} | rng<0xF20, 0xF29>{};
C Extender = chr<0xB7>{} | chr<0x2D0>{} | chr<0x2D1>{} | chr<0x387>{} |
             chr<0x640>{} | chr<0xE46>{} | chr<0xEC6>{} | chr<0x3005>{} |
             rng<0x3031, 0x3035>{} | rng<0x309D, 0x309E>{} |
             rng<0x30FC, 0x30FE>{};

// Letter         ::=  BaseChar | Ideographic
C Letter = BaseChar | Ideographic;

C Char = chr<0x9, 0xA, 0xD>{} |
         rng<0x20, 0xD7FF, 0xE000, 0xFFFD, 0x10000, 0x10FFFF>{};

C W = chr<0x20, 0x9, 0xD, 0xA>{};
C S = W | many{W};

// Eq           ::=  S? '=' S?
C Eq = many{W} & "=" & many{W};

// NameChar  ::=  Letter | Digit |  '.' | '-' | '_' | ':' |  CombiningChar |
// Extender
C NameChar =
    Letter | Digit | chr<'.', '-', '_', ':'>{} | CombiningChar | Extender;

// Name      ::=  (Letter | '_' | ':') (NameChar)*
C Name = (Letter | chr<'_', ':'>{}) & many{NameChar};
C prolog = str{""};
C Misc = str{""};

// CharRef	   ::=   	'&#' [0-9]+ ';' | '&#x' [0-9a-fA-F]+ ';'
C CharRef = "&#" & ++rng<'0', '9'>{} & ";" |
            "&#x" & ++rng<'0', '9', 'a', 'f', 'A', 'F'>{} & ";";

C EntityRef = "&" & Name & ";";

// Reference    ::=  EntityRef | CharRef
C Reference = EntityRef | CharRef;

// AttValue       ::=  '"' ([^<&"] | Reference)* '"'
//                 |  "'" ([^<&'] | Reference)* "'"
C AttValue = "\"" & *(nchr<'<', '&', '"'>{} | Reference) & "\"" |
             "'" & *(nchr<'<', '&', '\''>{} | Reference) & "'";

// Attribute     ::=  Name Eq AttValue
C Attribute = Name & Eq & AttValue;

// EmptyElemTag  ::=  '<' Name (S Attribute)* S? '/>'
C EmptyElemTag = "<" & Name & many{S & Attribute} & opt{S} & "/>";

// STag          ::=  '<' Name (S Attribute)* S? '>'
C STag = "<" & Name & many{S & Attribute} & opt{S} & ">";

// ETag          ::=  '</' Name S? '>'
C ETag = "</" & Name & opt{S} & ">";

// CharData  ::=  [^<&]* - ([^<&]* ']]>' [^<&]*)  wtf! how to substract one from
// many?
C CharData = many{nchr<'<', '&'>{}};

C Comment = str{""};
C CDSect = str{""};
C PI = str{""};

// struct element {
//  M()(const char *in, size_t avail) {
//    // content       ::=  CharData?
//    //                   ((element | Reference | CDSect | PI | Comment)
//    //                   CharData?)*
//    auto content =
//        opt(CharData) &
//        many((*this | Reference | CDSect | PI | Comment) & opt(CharData));
//    (EmptyElemTag | STag & content & ETag)(in, avail, o);
//  }
//};
//
//// document  ::=  prolog element Misc*
// C document = prolog & element{} & many(Misc);
//
} // namespace parsec::xml

#include <iostream>

auto main() -> int {
  using namespace parsec;
  auto run = [](const char *in, const auto &parser) {
    size_t Size = 0;
    while (in[Size] != '\0')
      Size++;
    size_t pos = 0;
    parser(
        [&](int x) {
          if (x < 0)
            std::cout << "error: " << x << "\n";
          else {
            pos += x;
            std::cout << "[" << std::string_view(in, pos) << "] [" << in + pos
                      << "]\n";
          }
        },
        in, Size);
  };

  //  run("01!`ა\001ბAB", one_or_many(xml::Char));
  //  run("<Tag n =    'abo' />", xml::EmptyElemTag);
  // run("ACBაoBABAB", one_or_many((str{"A"} | "o" | "B" | "C" | "ა") -
}
